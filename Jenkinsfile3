pipeline {
    agent any

    stages {
        stage('Install Dependencies') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    dir('frontend') {
                        // Install Node.js dependencies
                        // sh 'npm install --legacy-peer-deps'
                        // sh 'npm install @emotion/react'
                        // sh 'npm install --save-dev @babel/plugin-proposal-private-property-in-object --force'
                        sh 'npm install react-firebase@latest --force'
                    }
                }
            }
        }

        /* stage('Lint') {
            steps {
                // Run ESLint to catch issues
                sh 'npx eslint src/ --quiet' // --quiet will only show errors
            }
        } */

        stage('Build') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    script {
                        // Build the React application
                        dir('frontend') {
                            sh 'CI=false npm run build'
                        }
                    }
                }
            }
        }

        stage('Copy Files') {
            steps {
                // Make sure the destination directory exists
                sh 'mkdir -p /var/www/connect'
                // Copy the files using cp, with sudo if necessary
                sh 'cp -r build/ /var/www/connect/'
            }
        }

        // Backend Build
        stage('Install Backend Dependencies') {
            steps {
                script {
                    nodejs(NODEJS_BACKEND) {
                        def backendDirs = ['backend']

                        backendDirs.each { dirName -> 
                            dir(dirName) {
                                sh 'npm install --force'
                            }
                        }
                    }
                }
            }
        }

        // Start the application using pm2
        stage('Start Application with PM2') {
            steps {
                script {
                    // Ensure PM2 is installed globally (if not already installed)
                    sh 'npm install -g pm2'

                    // Start the app using pm2 (ensure the correct path to your Server.js file)
                    sh 'pm2 start Server.js --name your-app-name'

                    // Optionally save the PM2 process list to be auto-restarted after a reboot
                    sh 'pm2 save'
                }
            }
        }

        stage('Deploy') {
            steps {
                // Deploy the application (this will depend on your deployment strategy)
                echo 'Deploying application...'
                // Add your deployment commands here
            }
        }
    }

    post {
        success {
            echo 'Build and deployment successful!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}

